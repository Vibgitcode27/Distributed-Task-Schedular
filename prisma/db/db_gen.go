// --- template _header.gotpl ---
// Code generated by Prisma Client Go. DO NOT EDIT.
//nolint
//go:build !codeanalysis
// +build !codeanalysis

package db

import (
	"context"
	"os"
	"slices"
	"testing"

	// no-op import for go modules
	_ "github.com/joho/godotenv"
	_ "github.com/shopspring/decimal"

	"github.com/steebchen/prisma-client-go/engine"
	"github.com/steebchen/prisma-client-go/engine/mock"
	"github.com/steebchen/prisma-client-go/runtime/builder"
	"github.com/steebchen/prisma-client-go/runtime/lifecycle"
	"github.com/steebchen/prisma-client-go/runtime/raw"
	"github.com/steebchen/prisma-client-go/runtime/transaction"
	"github.com/steebchen/prisma-client-go/runtime/types"
	rawmodels "github.com/steebchen/prisma-client-go/runtime/types/raw"
)

// ignore unused os import as it may not be needed depending on engine type
var _ = os.DevNull

// re-declare variables which are needed in Prisma Client Go but also should be exported
// in the generated client

type PrismaTransaction = transaction.Transaction

const RFC3339Milli = types.RFC3339Milli

type BatchResult = types.BatchResult

type Boolean = bool
type String = string
type Int = int
type Float = float64

type DateTime = types.DateTime
type JSON = types.JSON
type Bytes = types.Bytes
type BigInt = types.BigInt
type Decimal = types.Decimal

type RawString = rawmodels.String
type RawInt = rawmodels.Int
type RawFloat = rawmodels.Float
type RawBoolean = rawmodels.Boolean
type RawDateTime = rawmodels.DateTime
type RawJSON = rawmodels.JSON
type RawBytes = rawmodels.Bytes
type RawBigInt = rawmodels.BigInt
type RawDecimal = rawmodels.Decimal

// deprecated: use SortOrder
type Direction = SortOrder

const (
	// deprecated: use SortOrderAsc
	ASC Direction = "asc"
	// deprecated: use SortOrderDesc
	DESC Direction = "desc"
)

// --- template client.gotpl ---
const datasources = `[{"name":"db","provider":"postgresql","activeProvider":"postgresql","url":{"fromEnvVar":"DATABASE_URL","value":""},"config":null}]`

const schema = `datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator db {
  provider = "go run github.com/steebchen/prisma-client-go"
}

model Tasks {
  id          String    @id @unique @default(uuid())
  command     String
  scheduledAt DateTime
  pickedAt    DateTime?
  startedAt   DateTime?
  completedAt DateTime?
  failedAt    DateTime?

  @@index([scheduledAt])
}
`
const schemaDatasourceURL = ""
const schemaEnvVarName = "DATABASE_URL"

// hasBinaryTargets is true when binaryTargets are provided on generation time
var hasBinaryTargets = true

// NewClient creates a new Prisma Client Go client.
// The client is not connected to the Prisma engine yet.
//
// Example:
//
//	client := db.NewClient()
//	if err := client.Prisma.Connect(); err != nil {
//	  handle(err)
//	}
//
//	defer func() {
//	  if err := client.Prisma.Disconnect(); err != nil {
//	    panic(fmt.Errorf("could not disconnect: %w", err))
//	  }
//	}()
func NewClient(options ...func(config *PrismaConfig)) *PrismaClient {
	var config PrismaConfig
	for _, option := range options {
		option(&config)
	}

	c := newClient()

	// use the schema connection url if set
	url := config.datasourceURL
	if url == "" {
		url = schemaDatasourceURL
		if url == "" {
			// if not, use the schema env var name
			url = os.Getenv(schemaEnvVarName)
			if url == "" {
				//panic("no connection string found")
				println("WARNING: env var which was defined in the Prisma schema is not set " + schemaEnvVarName)
			}
		}
	}

	c.Engine = engine.NewQueryEngine(schema, hasBinaryTargets, datasources, url)

	c.Prisma.Lifecycle = &lifecycle.Lifecycle{Engine: c.Engine}

	return c
}

type PrismaConfig struct {
	datasourceURL string
}

func WithDatasourceURL(url string) func(*PrismaConfig) {
	return func(config *PrismaConfig) {
		config.datasourceURL = url
	}
}

func newMockClient(expectations *[]mock.Expectation) *PrismaClient {
	c := newClient()
	c.Engine = mock.New(expectations)
	c.Prisma.Lifecycle = &lifecycle.Lifecycle{Engine: c.Engine}

	return c
}

func newClient() *PrismaClient {
	c := &PrismaClient{}
	c.Tasks = tasksActions{client: c}

	c.Prisma = &PrismaActions{
		Raw: &raw.Raw{Engine: c},
		TX:  &transaction.TX{Engine: c},
	}
	return c
}

type PrismaActions struct {
	*lifecycle.Lifecycle
	*raw.Raw
	*transaction.TX
}

// PrismaClient is the instance of the Prisma Client Go client.
type PrismaClient struct {
	// engine is an abstractions of what happens under the hood
	// the query engine can spawn and manage the binary and send requests to it,
	// while a mock engine would collect mocks to verify them later
	engine.Engine

	// prisma provides prisma-related methods as opposed to model methods, such as Connect, Disconnect or raw queries
	Prisma *PrismaActions

	// Tasks provides access to CRUD methods.
	Tasks tasksActions
}

// --- template enums.gotpl ---

type TransactionIsolationLevel string

const (
	TransactionIsolationLevelReadUncommitted TransactionIsolationLevel = "ReadUncommitted"
	TransactionIsolationLevelReadCommitted   TransactionIsolationLevel = "ReadCommitted"
	TransactionIsolationLevelRepeatableRead  TransactionIsolationLevel = "RepeatableRead"
	TransactionIsolationLevelSerializable    TransactionIsolationLevel = "Serializable"
)

type TasksScalarFieldEnum string

const (
	TasksScalarFieldEnumID          TasksScalarFieldEnum = "id"
	TasksScalarFieldEnumCommand     TasksScalarFieldEnum = "command"
	TasksScalarFieldEnumScheduledAt TasksScalarFieldEnum = "scheduledAt"
	TasksScalarFieldEnumPickedAt    TasksScalarFieldEnum = "pickedAt"
	TasksScalarFieldEnumStartedAt   TasksScalarFieldEnum = "startedAt"
	TasksScalarFieldEnumCompletedAt TasksScalarFieldEnum = "completedAt"
	TasksScalarFieldEnumFailedAt    TasksScalarFieldEnum = "failedAt"
)

type SortOrder string

const (
	SortOrderAsc  SortOrder = "asc"
	SortOrderDesc SortOrder = "desc"
)

type QueryMode string

const (
	QueryModeDefault     QueryMode = "default"
	QueryModeInsensitive QueryMode = "insensitive"
)

type NullsOrder string

const (
	NullsOrderFirst NullsOrder = "first"
	NullsOrderLast  NullsOrder = "last"
)

// --- template errors.gotpl ---
var ErrNotFound = types.ErrNotFound
var IsErrNotFound = types.IsErrNotFound

type ErrUniqueConstraint = types.ErrUniqueConstraint[prismaFields]

// IsErrUniqueConstraint returns on a unique constraint error or violation with error info
// Use as follows:
//
//	user, err := db.User.CreateOne(...).Exec(cxt)
//	if err != nil {
//		if info, err := db.IsErrUniqueConstraint(err); err != nil {
//			// Fields exists for Postgres and SQLite
//			log.Printf("unique constraint on the fields: %s", info.Fields)
//
//			// you can also compare it with generated field names:
//			if info.Fields[0] == db.User.Name.Field() {
//				// do something
//			}
//
//			// For MySQL, use the constraint key
//			log.Printf("unique constraint on the key: %s", info.Key)
//		}
//	}
func IsErrUniqueConstraint(err error) (*types.ErrUniqueConstraint[prismaFields], bool) {
	return types.CheckUniqueConstraint[prismaFields](err)
}

// --- template fields.gotpl ---
type prismaFields string

type tasksPrismaFields = prismaFields

const tasksFieldID tasksPrismaFields = "id"

const tasksFieldCommand tasksPrismaFields = "command"

const tasksFieldScheduledAt tasksPrismaFields = "scheduledAt"

const tasksFieldPickedAt tasksPrismaFields = "pickedAt"

const tasksFieldStartedAt tasksPrismaFields = "startedAt"

const tasksFieldCompletedAt tasksPrismaFields = "completedAt"

const tasksFieldFailedAt tasksPrismaFields = "failedAt"

// --- template mock.gotpl ---
func NewMock() (*PrismaClient, *Mock, func(t *testing.T)) {
	expectations := new([]mock.Expectation)
	pc := newMockClient(expectations)
	m := &Mock{
		Mock: &mock.Mock{
			Expectations: expectations,
		},
	}

	m.Tasks = tasksMock{
		mock: m,
	}

	return pc, m, m.Ensure
}

type Mock struct {
	*mock.Mock

	Tasks tasksMock
}

type tasksMock struct {
	mock *Mock
}

type TasksMockExpectParam interface {
	ExtractQuery() builder.Query
	tasksModel()
}

func (m *tasksMock) Expect(query TasksMockExpectParam) *tasksMockExec {
	return &tasksMockExec{
		mock:  m.mock,
		query: query.ExtractQuery(),
	}
}

type tasksMockExec struct {
	mock  *Mock
	query builder.Query
}

func (m *tasksMockExec) Returns(v TasksModel) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query: m.query,
		Want:  &v,
	})
}

func (m *tasksMockExec) ReturnsMany(v []TasksModel) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query: m.query,
		Want:  &v,
	})
}

func (m *tasksMockExec) Errors(err error) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query:   m.query,
		WantErr: err,
	})
}

// --- template models.gotpl ---

// TasksModel represents the Tasks model and is a wrapper for accessing fields and methods
type TasksModel struct {
	InnerTasks
	RelationsTasks
}

// InnerTasks holds the actual data
type InnerTasks struct {
	ID          string    `json:"id"`
	Command     string    `json:"command"`
	ScheduledAt DateTime  `json:"scheduledAt"`
	PickedAt    *DateTime `json:"pickedAt,omitempty"`
	StartedAt   *DateTime `json:"startedAt,omitempty"`
	CompletedAt *DateTime `json:"completedAt,omitempty"`
	FailedAt    *DateTime `json:"failedAt,omitempty"`
}

// RawTasksModel is a struct for Tasks when used in raw queries
type RawTasksModel struct {
	ID          RawString    `json:"id"`
	Command     RawString    `json:"command"`
	ScheduledAt RawDateTime  `json:"scheduledAt"`
	PickedAt    *RawDateTime `json:"pickedAt,omitempty"`
	StartedAt   *RawDateTime `json:"startedAt,omitempty"`
	CompletedAt *RawDateTime `json:"completedAt,omitempty"`
	FailedAt    *RawDateTime `json:"failedAt,omitempty"`
}

// RelationsTasks holds the relation data separately
type RelationsTasks struct {
}

func (r TasksModel) PickedAt() (value DateTime, ok bool) {
	if r.InnerTasks.PickedAt == nil {
		return value, false
	}
	return *r.InnerTasks.PickedAt, true
}

func (r TasksModel) StartedAt() (value DateTime, ok bool) {
	if r.InnerTasks.StartedAt == nil {
		return value, false
	}
	return *r.InnerTasks.StartedAt, true
}

func (r TasksModel) CompletedAt() (value DateTime, ok bool) {
	if r.InnerTasks.CompletedAt == nil {
		return value, false
	}
	return *r.InnerTasks.CompletedAt, true
}

func (r TasksModel) FailedAt() (value DateTime, ok bool) {
	if r.InnerTasks.FailedAt == nil {
		return value, false
	}
	return *r.InnerTasks.FailedAt, true
}

// --- template query.gotpl ---

// Tasks acts as a namespaces to access query methods for the Tasks model
var Tasks = tasksQuery{}

// tasksQuery exposes query functions for the tasks model
type tasksQuery struct {

	// ID
	//
	// @required
	ID tasksQueryIDString

	// Command
	//
	// @required
	Command tasksQueryCommandString

	// ScheduledAt
	//
	// @required
	ScheduledAt tasksQueryScheduledAtDateTime

	// PickedAt
	//
	// @optional
	PickedAt tasksQueryPickedAtDateTime

	// StartedAt
	//
	// @optional
	StartedAt tasksQueryStartedAtDateTime

	// CompletedAt
	//
	// @optional
	CompletedAt tasksQueryCompletedAtDateTime

	// FailedAt
	//
	// @optional
	FailedAt tasksQueryFailedAtDateTime
}

func (tasksQuery) Not(params ...TasksWhereParam) tasksDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return tasksDefaultParam{
		data: builder.Field{
			Name:     "NOT",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (tasksQuery) Or(params ...TasksWhereParam) tasksDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return tasksDefaultParam{
		data: builder.Field{
			Name:     "OR",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (tasksQuery) And(params ...TasksWhereParam) tasksDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return tasksDefaultParam{
		data: builder.Field{
			Name:     "AND",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

// base struct
type tasksQueryIDString struct{}

// Set the required value of ID
func (r tasksQueryIDString) Set(value string) tasksSetParam {

	return tasksSetParam{
		data: builder.Field{
			Name:  "id",
			Value: value,
		},
	}

}

// Set the optional value of ID dynamically
func (r tasksQueryIDString) SetIfPresent(value *String) tasksSetParam {
	if value == nil {
		return tasksSetParam{}
	}

	return r.Set(*value)
}

func (r tasksQueryIDString) Equals(value string) tasksWithPrismaIDEqualsUniqueParam {

	return tasksWithPrismaIDEqualsUniqueParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r tasksQueryIDString) EqualsIfPresent(value *string) tasksWithPrismaIDEqualsUniqueParam {
	if value == nil {
		return tasksWithPrismaIDEqualsUniqueParam{}
	}
	return r.Equals(*value)
}

func (r tasksQueryIDString) Order(direction SortOrder) tasksDefaultParam {
	return tasksDefaultParam{
		data: builder.Field{
			Name:  "id",
			Value: direction,
		},
	}
}

func (r tasksQueryIDString) Cursor(cursor string) tasksCursorParam {
	return tasksCursorParam{
		data: builder.Field{
			Name:  "id",
			Value: cursor,
		},
	}
}

func (r tasksQueryIDString) In(value []string) tasksParamUnique {
	return tasksParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r tasksQueryIDString) InIfPresent(value []string) tasksParamUnique {
	if value == nil {
		return tasksParamUnique{}
	}
	return r.In(value)
}

func (r tasksQueryIDString) NotIn(value []string) tasksParamUnique {
	return tasksParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r tasksQueryIDString) NotInIfPresent(value []string) tasksParamUnique {
	if value == nil {
		return tasksParamUnique{}
	}
	return r.NotIn(value)
}

func (r tasksQueryIDString) Lt(value string) tasksParamUnique {
	return tasksParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r tasksQueryIDString) LtIfPresent(value *string) tasksParamUnique {
	if value == nil {
		return tasksParamUnique{}
	}
	return r.Lt(*value)
}

func (r tasksQueryIDString) Lte(value string) tasksParamUnique {
	return tasksParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r tasksQueryIDString) LteIfPresent(value *string) tasksParamUnique {
	if value == nil {
		return tasksParamUnique{}
	}
	return r.Lte(*value)
}

func (r tasksQueryIDString) Gt(value string) tasksParamUnique {
	return tasksParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r tasksQueryIDString) GtIfPresent(value *string) tasksParamUnique {
	if value == nil {
		return tasksParamUnique{}
	}
	return r.Gt(*value)
}

func (r tasksQueryIDString) Gte(value string) tasksParamUnique {
	return tasksParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r tasksQueryIDString) GteIfPresent(value *string) tasksParamUnique {
	if value == nil {
		return tasksParamUnique{}
	}
	return r.Gte(*value)
}

func (r tasksQueryIDString) Contains(value string) tasksParamUnique {
	return tasksParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r tasksQueryIDString) ContainsIfPresent(value *string) tasksParamUnique {
	if value == nil {
		return tasksParamUnique{}
	}
	return r.Contains(*value)
}

func (r tasksQueryIDString) StartsWith(value string) tasksParamUnique {
	return tasksParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r tasksQueryIDString) StartsWithIfPresent(value *string) tasksParamUnique {
	if value == nil {
		return tasksParamUnique{}
	}
	return r.StartsWith(*value)
}

func (r tasksQueryIDString) EndsWith(value string) tasksParamUnique {
	return tasksParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r tasksQueryIDString) EndsWithIfPresent(value *string) tasksParamUnique {
	if value == nil {
		return tasksParamUnique{}
	}
	return r.EndsWith(*value)
}

func (r tasksQueryIDString) Mode(value QueryMode) tasksParamUnique {
	return tasksParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r tasksQueryIDString) ModeIfPresent(value *QueryMode) tasksParamUnique {
	if value == nil {
		return tasksParamUnique{}
	}
	return r.Mode(*value)
}

func (r tasksQueryIDString) Not(value string) tasksParamUnique {
	return tasksParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r tasksQueryIDString) NotIfPresent(value *string) tasksParamUnique {
	if value == nil {
		return tasksParamUnique{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r tasksQueryIDString) HasPrefix(value string) tasksParamUnique {
	return tasksParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r tasksQueryIDString) HasPrefixIfPresent(value *string) tasksParamUnique {
	if value == nil {
		return tasksParamUnique{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r tasksQueryIDString) HasSuffix(value string) tasksParamUnique {
	return tasksParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r tasksQueryIDString) HasSuffixIfPresent(value *string) tasksParamUnique {
	if value == nil {
		return tasksParamUnique{}
	}
	return r.HasSuffix(*value)
}

func (r tasksQueryIDString) Field() tasksPrismaFields {
	return tasksFieldID
}

// base struct
type tasksQueryCommandString struct{}

// Set the required value of Command
func (r tasksQueryCommandString) Set(value string) tasksWithPrismaCommandSetParam {

	return tasksWithPrismaCommandSetParam{
		data: builder.Field{
			Name:  "command",
			Value: value,
		},
	}

}

// Set the optional value of Command dynamically
func (r tasksQueryCommandString) SetIfPresent(value *String) tasksWithPrismaCommandSetParam {
	if value == nil {
		return tasksWithPrismaCommandSetParam{}
	}

	return r.Set(*value)
}

func (r tasksQueryCommandString) Equals(value string) tasksWithPrismaCommandEqualsParam {

	return tasksWithPrismaCommandEqualsParam{
		data: builder.Field{
			Name: "command",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r tasksQueryCommandString) EqualsIfPresent(value *string) tasksWithPrismaCommandEqualsParam {
	if value == nil {
		return tasksWithPrismaCommandEqualsParam{}
	}
	return r.Equals(*value)
}

func (r tasksQueryCommandString) Order(direction SortOrder) tasksDefaultParam {
	return tasksDefaultParam{
		data: builder.Field{
			Name:  "command",
			Value: direction,
		},
	}
}

func (r tasksQueryCommandString) Cursor(cursor string) tasksCursorParam {
	return tasksCursorParam{
		data: builder.Field{
			Name:  "command",
			Value: cursor,
		},
	}
}

func (r tasksQueryCommandString) In(value []string) tasksDefaultParam {
	return tasksDefaultParam{
		data: builder.Field{
			Name: "command",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r tasksQueryCommandString) InIfPresent(value []string) tasksDefaultParam {
	if value == nil {
		return tasksDefaultParam{}
	}
	return r.In(value)
}

func (r tasksQueryCommandString) NotIn(value []string) tasksDefaultParam {
	return tasksDefaultParam{
		data: builder.Field{
			Name: "command",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r tasksQueryCommandString) NotInIfPresent(value []string) tasksDefaultParam {
	if value == nil {
		return tasksDefaultParam{}
	}
	return r.NotIn(value)
}

func (r tasksQueryCommandString) Lt(value string) tasksDefaultParam {
	return tasksDefaultParam{
		data: builder.Field{
			Name: "command",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r tasksQueryCommandString) LtIfPresent(value *string) tasksDefaultParam {
	if value == nil {
		return tasksDefaultParam{}
	}
	return r.Lt(*value)
}

func (r tasksQueryCommandString) Lte(value string) tasksDefaultParam {
	return tasksDefaultParam{
		data: builder.Field{
			Name: "command",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r tasksQueryCommandString) LteIfPresent(value *string) tasksDefaultParam {
	if value == nil {
		return tasksDefaultParam{}
	}
	return r.Lte(*value)
}

func (r tasksQueryCommandString) Gt(value string) tasksDefaultParam {
	return tasksDefaultParam{
		data: builder.Field{
			Name: "command",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r tasksQueryCommandString) GtIfPresent(value *string) tasksDefaultParam {
	if value == nil {
		return tasksDefaultParam{}
	}
	return r.Gt(*value)
}

func (r tasksQueryCommandString) Gte(value string) tasksDefaultParam {
	return tasksDefaultParam{
		data: builder.Field{
			Name: "command",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r tasksQueryCommandString) GteIfPresent(value *string) tasksDefaultParam {
	if value == nil {
		return tasksDefaultParam{}
	}
	return r.Gte(*value)
}

func (r tasksQueryCommandString) Contains(value string) tasksDefaultParam {
	return tasksDefaultParam{
		data: builder.Field{
			Name: "command",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r tasksQueryCommandString) ContainsIfPresent(value *string) tasksDefaultParam {
	if value == nil {
		return tasksDefaultParam{}
	}
	return r.Contains(*value)
}

func (r tasksQueryCommandString) StartsWith(value string) tasksDefaultParam {
	return tasksDefaultParam{
		data: builder.Field{
			Name: "command",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r tasksQueryCommandString) StartsWithIfPresent(value *string) tasksDefaultParam {
	if value == nil {
		return tasksDefaultParam{}
	}
	return r.StartsWith(*value)
}

func (r tasksQueryCommandString) EndsWith(value string) tasksDefaultParam {
	return tasksDefaultParam{
		data: builder.Field{
			Name: "command",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r tasksQueryCommandString) EndsWithIfPresent(value *string) tasksDefaultParam {
	if value == nil {
		return tasksDefaultParam{}
	}
	return r.EndsWith(*value)
}

func (r tasksQueryCommandString) Mode(value QueryMode) tasksDefaultParam {
	return tasksDefaultParam{
		data: builder.Field{
			Name: "command",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r tasksQueryCommandString) ModeIfPresent(value *QueryMode) tasksDefaultParam {
	if value == nil {
		return tasksDefaultParam{}
	}
	return r.Mode(*value)
}

func (r tasksQueryCommandString) Not(value string) tasksDefaultParam {
	return tasksDefaultParam{
		data: builder.Field{
			Name: "command",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r tasksQueryCommandString) NotIfPresent(value *string) tasksDefaultParam {
	if value == nil {
		return tasksDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r tasksQueryCommandString) HasPrefix(value string) tasksDefaultParam {
	return tasksDefaultParam{
		data: builder.Field{
			Name: "command",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r tasksQueryCommandString) HasPrefixIfPresent(value *string) tasksDefaultParam {
	if value == nil {
		return tasksDefaultParam{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r tasksQueryCommandString) HasSuffix(value string) tasksDefaultParam {
	return tasksDefaultParam{
		data: builder.Field{
			Name: "command",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r tasksQueryCommandString) HasSuffixIfPresent(value *string) tasksDefaultParam {
	if value == nil {
		return tasksDefaultParam{}
	}
	return r.HasSuffix(*value)
}

func (r tasksQueryCommandString) Field() tasksPrismaFields {
	return tasksFieldCommand
}

// base struct
type tasksQueryScheduledAtDateTime struct{}

// Set the required value of ScheduledAt
func (r tasksQueryScheduledAtDateTime) Set(value DateTime) tasksWithPrismaScheduledAtSetParam {

	return tasksWithPrismaScheduledAtSetParam{
		data: builder.Field{
			Name:  "scheduledAt",
			Value: value,
		},
	}

}

// Set the optional value of ScheduledAt dynamically
func (r tasksQueryScheduledAtDateTime) SetIfPresent(value *DateTime) tasksWithPrismaScheduledAtSetParam {
	if value == nil {
		return tasksWithPrismaScheduledAtSetParam{}
	}

	return r.Set(*value)
}

func (r tasksQueryScheduledAtDateTime) Equals(value DateTime) tasksWithPrismaScheduledAtEqualsParam {

	return tasksWithPrismaScheduledAtEqualsParam{
		data: builder.Field{
			Name: "scheduledAt",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r tasksQueryScheduledAtDateTime) EqualsIfPresent(value *DateTime) tasksWithPrismaScheduledAtEqualsParam {
	if value == nil {
		return tasksWithPrismaScheduledAtEqualsParam{}
	}
	return r.Equals(*value)
}

func (r tasksQueryScheduledAtDateTime) Order(direction SortOrder) tasksDefaultParam {
	return tasksDefaultParam{
		data: builder.Field{
			Name:  "scheduledAt",
			Value: direction,
		},
	}
}

func (r tasksQueryScheduledAtDateTime) Cursor(cursor DateTime) tasksCursorParam {
	return tasksCursorParam{
		data: builder.Field{
			Name:  "scheduledAt",
			Value: cursor,
		},
	}
}

func (r tasksQueryScheduledAtDateTime) In(value []DateTime) tasksDefaultParam {
	return tasksDefaultParam{
		data: builder.Field{
			Name: "scheduledAt",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r tasksQueryScheduledAtDateTime) InIfPresent(value []DateTime) tasksDefaultParam {
	if value == nil {
		return tasksDefaultParam{}
	}
	return r.In(value)
}

func (r tasksQueryScheduledAtDateTime) NotIn(value []DateTime) tasksDefaultParam {
	return tasksDefaultParam{
		data: builder.Field{
			Name: "scheduledAt",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r tasksQueryScheduledAtDateTime) NotInIfPresent(value []DateTime) tasksDefaultParam {
	if value == nil {
		return tasksDefaultParam{}
	}
	return r.NotIn(value)
}

func (r tasksQueryScheduledAtDateTime) Lt(value DateTime) tasksDefaultParam {
	return tasksDefaultParam{
		data: builder.Field{
			Name: "scheduledAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r tasksQueryScheduledAtDateTime) LtIfPresent(value *DateTime) tasksDefaultParam {
	if value == nil {
		return tasksDefaultParam{}
	}
	return r.Lt(*value)
}

func (r tasksQueryScheduledAtDateTime) Lte(value DateTime) tasksDefaultParam {
	return tasksDefaultParam{
		data: builder.Field{
			Name: "scheduledAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r tasksQueryScheduledAtDateTime) LteIfPresent(value *DateTime) tasksDefaultParam {
	if value == nil {
		return tasksDefaultParam{}
	}
	return r.Lte(*value)
}

func (r tasksQueryScheduledAtDateTime) Gt(value DateTime) tasksDefaultParam {
	return tasksDefaultParam{
		data: builder.Field{
			Name: "scheduledAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r tasksQueryScheduledAtDateTime) GtIfPresent(value *DateTime) tasksDefaultParam {
	if value == nil {
		return tasksDefaultParam{}
	}
	return r.Gt(*value)
}

func (r tasksQueryScheduledAtDateTime) Gte(value DateTime) tasksDefaultParam {
	return tasksDefaultParam{
		data: builder.Field{
			Name: "scheduledAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r tasksQueryScheduledAtDateTime) GteIfPresent(value *DateTime) tasksDefaultParam {
	if value == nil {
		return tasksDefaultParam{}
	}
	return r.Gte(*value)
}

func (r tasksQueryScheduledAtDateTime) Not(value DateTime) tasksDefaultParam {
	return tasksDefaultParam{
		data: builder.Field{
			Name: "scheduledAt",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r tasksQueryScheduledAtDateTime) NotIfPresent(value *DateTime) tasksDefaultParam {
	if value == nil {
		return tasksDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r tasksQueryScheduledAtDateTime) Before(value DateTime) tasksDefaultParam {
	return tasksDefaultParam{
		data: builder.Field{
			Name: "scheduledAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r tasksQueryScheduledAtDateTime) BeforeIfPresent(value *DateTime) tasksDefaultParam {
	if value == nil {
		return tasksDefaultParam{}
	}
	return r.Before(*value)
}

// deprecated: Use Gt instead.

func (r tasksQueryScheduledAtDateTime) After(value DateTime) tasksDefaultParam {
	return tasksDefaultParam{
		data: builder.Field{
			Name: "scheduledAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r tasksQueryScheduledAtDateTime) AfterIfPresent(value *DateTime) tasksDefaultParam {
	if value == nil {
		return tasksDefaultParam{}
	}
	return r.After(*value)
}

// deprecated: Use Lte instead.

func (r tasksQueryScheduledAtDateTime) BeforeEquals(value DateTime) tasksDefaultParam {
	return tasksDefaultParam{
		data: builder.Field{
			Name: "scheduledAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r tasksQueryScheduledAtDateTime) BeforeEqualsIfPresent(value *DateTime) tasksDefaultParam {
	if value == nil {
		return tasksDefaultParam{}
	}
	return r.BeforeEquals(*value)
}

// deprecated: Use Gte instead.

func (r tasksQueryScheduledAtDateTime) AfterEquals(value DateTime) tasksDefaultParam {
	return tasksDefaultParam{
		data: builder.Field{
			Name: "scheduledAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r tasksQueryScheduledAtDateTime) AfterEqualsIfPresent(value *DateTime) tasksDefaultParam {
	if value == nil {
		return tasksDefaultParam{}
	}
	return r.AfterEquals(*value)
}

func (r tasksQueryScheduledAtDateTime) Field() tasksPrismaFields {
	return tasksFieldScheduledAt
}

// base struct
type tasksQueryPickedAtDateTime struct{}

// Set the optional value of PickedAt
func (r tasksQueryPickedAtDateTime) Set(value DateTime) tasksSetParam {

	return tasksSetParam{
		data: builder.Field{
			Name:  "pickedAt",
			Value: value,
		},
	}

}

// Set the optional value of PickedAt dynamically
func (r tasksQueryPickedAtDateTime) SetIfPresent(value *DateTime) tasksSetParam {
	if value == nil {
		return tasksSetParam{}
	}

	return r.Set(*value)
}

// Set the optional value of PickedAt dynamically
func (r tasksQueryPickedAtDateTime) SetOptional(value *DateTime) tasksSetParam {
	if value == nil {

		var v *DateTime
		return tasksSetParam{
			data: builder.Field{
				Name:  "pickedAt",
				Value: v,
			},
		}
	}

	return r.Set(*value)
}

func (r tasksQueryPickedAtDateTime) Equals(value DateTime) tasksWithPrismaPickedAtEqualsParam {

	return tasksWithPrismaPickedAtEqualsParam{
		data: builder.Field{
			Name: "pickedAt",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r tasksQueryPickedAtDateTime) EqualsIfPresent(value *DateTime) tasksWithPrismaPickedAtEqualsParam {
	if value == nil {
		return tasksWithPrismaPickedAtEqualsParam{}
	}
	return r.Equals(*value)
}

func (r tasksQueryPickedAtDateTime) EqualsOptional(value *DateTime) tasksDefaultParam {
	return tasksDefaultParam{
		data: builder.Field{
			Name: "pickedAt",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r tasksQueryPickedAtDateTime) IsNull() tasksDefaultParam {
	var str *string = nil
	return tasksDefaultParam{
		data: builder.Field{
			Name: "pickedAt",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: str,
				},
			},
		},
	}
}

func (r tasksQueryPickedAtDateTime) Order(direction SortOrder) tasksDefaultParam {
	return tasksDefaultParam{
		data: builder.Field{
			Name:  "pickedAt",
			Value: direction,
		},
	}
}

func (r tasksQueryPickedAtDateTime) Cursor(cursor DateTime) tasksCursorParam {
	return tasksCursorParam{
		data: builder.Field{
			Name:  "pickedAt",
			Value: cursor,
		},
	}
}

func (r tasksQueryPickedAtDateTime) In(value []DateTime) tasksDefaultParam {
	return tasksDefaultParam{
		data: builder.Field{
			Name: "pickedAt",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r tasksQueryPickedAtDateTime) InIfPresent(value []DateTime) tasksDefaultParam {
	if value == nil {
		return tasksDefaultParam{}
	}
	return r.In(value)
}

func (r tasksQueryPickedAtDateTime) NotIn(value []DateTime) tasksDefaultParam {
	return tasksDefaultParam{
		data: builder.Field{
			Name: "pickedAt",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r tasksQueryPickedAtDateTime) NotInIfPresent(value []DateTime) tasksDefaultParam {
	if value == nil {
		return tasksDefaultParam{}
	}
	return r.NotIn(value)
}

func (r tasksQueryPickedAtDateTime) Lt(value DateTime) tasksDefaultParam {
	return tasksDefaultParam{
		data: builder.Field{
			Name: "pickedAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r tasksQueryPickedAtDateTime) LtIfPresent(value *DateTime) tasksDefaultParam {
	if value == nil {
		return tasksDefaultParam{}
	}
	return r.Lt(*value)
}

func (r tasksQueryPickedAtDateTime) Lte(value DateTime) tasksDefaultParam {
	return tasksDefaultParam{
		data: builder.Field{
			Name: "pickedAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r tasksQueryPickedAtDateTime) LteIfPresent(value *DateTime) tasksDefaultParam {
	if value == nil {
		return tasksDefaultParam{}
	}
	return r.Lte(*value)
}

func (r tasksQueryPickedAtDateTime) Gt(value DateTime) tasksDefaultParam {
	return tasksDefaultParam{
		data: builder.Field{
			Name: "pickedAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r tasksQueryPickedAtDateTime) GtIfPresent(value *DateTime) tasksDefaultParam {
	if value == nil {
		return tasksDefaultParam{}
	}
	return r.Gt(*value)
}

func (r tasksQueryPickedAtDateTime) Gte(value DateTime) tasksDefaultParam {
	return tasksDefaultParam{
		data: builder.Field{
			Name: "pickedAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r tasksQueryPickedAtDateTime) GteIfPresent(value *DateTime) tasksDefaultParam {
	if value == nil {
		return tasksDefaultParam{}
	}
	return r.Gte(*value)
}

func (r tasksQueryPickedAtDateTime) Not(value DateTime) tasksDefaultParam {
	return tasksDefaultParam{
		data: builder.Field{
			Name: "pickedAt",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r tasksQueryPickedAtDateTime) NotIfPresent(value *DateTime) tasksDefaultParam {
	if value == nil {
		return tasksDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r tasksQueryPickedAtDateTime) Before(value DateTime) tasksDefaultParam {
	return tasksDefaultParam{
		data: builder.Field{
			Name: "pickedAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r tasksQueryPickedAtDateTime) BeforeIfPresent(value *DateTime) tasksDefaultParam {
	if value == nil {
		return tasksDefaultParam{}
	}
	return r.Before(*value)
}

// deprecated: Use Gt instead.

func (r tasksQueryPickedAtDateTime) After(value DateTime) tasksDefaultParam {
	return tasksDefaultParam{
		data: builder.Field{
			Name: "pickedAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r tasksQueryPickedAtDateTime) AfterIfPresent(value *DateTime) tasksDefaultParam {
	if value == nil {
		return tasksDefaultParam{}
	}
	return r.After(*value)
}

// deprecated: Use Lte instead.

func (r tasksQueryPickedAtDateTime) BeforeEquals(value DateTime) tasksDefaultParam {
	return tasksDefaultParam{
		data: builder.Field{
			Name: "pickedAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r tasksQueryPickedAtDateTime) BeforeEqualsIfPresent(value *DateTime) tasksDefaultParam {
	if value == nil {
		return tasksDefaultParam{}
	}
	return r.BeforeEquals(*value)
}

// deprecated: Use Gte instead.

func (r tasksQueryPickedAtDateTime) AfterEquals(value DateTime) tasksDefaultParam {
	return tasksDefaultParam{
		data: builder.Field{
			Name: "pickedAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r tasksQueryPickedAtDateTime) AfterEqualsIfPresent(value *DateTime) tasksDefaultParam {
	if value == nil {
		return tasksDefaultParam{}
	}
	return r.AfterEquals(*value)
}

func (r tasksQueryPickedAtDateTime) Field() tasksPrismaFields {
	return tasksFieldPickedAt
}

// base struct
type tasksQueryStartedAtDateTime struct{}

// Set the optional value of StartedAt
func (r tasksQueryStartedAtDateTime) Set(value DateTime) tasksSetParam {

	return tasksSetParam{
		data: builder.Field{
			Name:  "startedAt",
			Value: value,
		},
	}

}

// Set the optional value of StartedAt dynamically
func (r tasksQueryStartedAtDateTime) SetIfPresent(value *DateTime) tasksSetParam {
	if value == nil {
		return tasksSetParam{}
	}

	return r.Set(*value)
}

// Set the optional value of StartedAt dynamically
func (r tasksQueryStartedAtDateTime) SetOptional(value *DateTime) tasksSetParam {
	if value == nil {

		var v *DateTime
		return tasksSetParam{
			data: builder.Field{
				Name:  "startedAt",
				Value: v,
			},
		}
	}

	return r.Set(*value)
}

func (r tasksQueryStartedAtDateTime) Equals(value DateTime) tasksWithPrismaStartedAtEqualsParam {

	return tasksWithPrismaStartedAtEqualsParam{
		data: builder.Field{
			Name: "startedAt",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r tasksQueryStartedAtDateTime) EqualsIfPresent(value *DateTime) tasksWithPrismaStartedAtEqualsParam {
	if value == nil {
		return tasksWithPrismaStartedAtEqualsParam{}
	}
	return r.Equals(*value)
}

func (r tasksQueryStartedAtDateTime) EqualsOptional(value *DateTime) tasksDefaultParam {
	return tasksDefaultParam{
		data: builder.Field{
			Name: "startedAt",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r tasksQueryStartedAtDateTime) IsNull() tasksDefaultParam {
	var str *string = nil
	return tasksDefaultParam{
		data: builder.Field{
			Name: "startedAt",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: str,
				},
			},
		},
	}
}

func (r tasksQueryStartedAtDateTime) Order(direction SortOrder) tasksDefaultParam {
	return tasksDefaultParam{
		data: builder.Field{
			Name:  "startedAt",
			Value: direction,
		},
	}
}

func (r tasksQueryStartedAtDateTime) Cursor(cursor DateTime) tasksCursorParam {
	return tasksCursorParam{
		data: builder.Field{
			Name:  "startedAt",
			Value: cursor,
		},
	}
}

func (r tasksQueryStartedAtDateTime) In(value []DateTime) tasksDefaultParam {
	return tasksDefaultParam{
		data: builder.Field{
			Name: "startedAt",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r tasksQueryStartedAtDateTime) InIfPresent(value []DateTime) tasksDefaultParam {
	if value == nil {
		return tasksDefaultParam{}
	}
	return r.In(value)
}

func (r tasksQueryStartedAtDateTime) NotIn(value []DateTime) tasksDefaultParam {
	return tasksDefaultParam{
		data: builder.Field{
			Name: "startedAt",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r tasksQueryStartedAtDateTime) NotInIfPresent(value []DateTime) tasksDefaultParam {
	if value == nil {
		return tasksDefaultParam{}
	}
	return r.NotIn(value)
}

func (r tasksQueryStartedAtDateTime) Lt(value DateTime) tasksDefaultParam {
	return tasksDefaultParam{
		data: builder.Field{
			Name: "startedAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r tasksQueryStartedAtDateTime) LtIfPresent(value *DateTime) tasksDefaultParam {
	if value == nil {
		return tasksDefaultParam{}
	}
	return r.Lt(*value)
}

func (r tasksQueryStartedAtDateTime) Lte(value DateTime) tasksDefaultParam {
	return tasksDefaultParam{
		data: builder.Field{
			Name: "startedAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r tasksQueryStartedAtDateTime) LteIfPresent(value *DateTime) tasksDefaultParam {
	if value == nil {
		return tasksDefaultParam{}
	}
	return r.Lte(*value)
}

func (r tasksQueryStartedAtDateTime) Gt(value DateTime) tasksDefaultParam {
	return tasksDefaultParam{
		data: builder.Field{
			Name: "startedAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r tasksQueryStartedAtDateTime) GtIfPresent(value *DateTime) tasksDefaultParam {
	if value == nil {
		return tasksDefaultParam{}
	}
	return r.Gt(*value)
}

func (r tasksQueryStartedAtDateTime) Gte(value DateTime) tasksDefaultParam {
	return tasksDefaultParam{
		data: builder.Field{
			Name: "startedAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r tasksQueryStartedAtDateTime) GteIfPresent(value *DateTime) tasksDefaultParam {
	if value == nil {
		return tasksDefaultParam{}
	}
	return r.Gte(*value)
}

func (r tasksQueryStartedAtDateTime) Not(value DateTime) tasksDefaultParam {
	return tasksDefaultParam{
		data: builder.Field{
			Name: "startedAt",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r tasksQueryStartedAtDateTime) NotIfPresent(value *DateTime) tasksDefaultParam {
	if value == nil {
		return tasksDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r tasksQueryStartedAtDateTime) Before(value DateTime) tasksDefaultParam {
	return tasksDefaultParam{
		data: builder.Field{
			Name: "startedAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r tasksQueryStartedAtDateTime) BeforeIfPresent(value *DateTime) tasksDefaultParam {
	if value == nil {
		return tasksDefaultParam{}
	}
	return r.Before(*value)
}

// deprecated: Use Gt instead.

func (r tasksQueryStartedAtDateTime) After(value DateTime) tasksDefaultParam {
	return tasksDefaultParam{
		data: builder.Field{
			Name: "startedAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r tasksQueryStartedAtDateTime) AfterIfPresent(value *DateTime) tasksDefaultParam {
	if value == nil {
		return tasksDefaultParam{}
	}
	return r.After(*value)
}

// deprecated: Use Lte instead.

func (r tasksQueryStartedAtDateTime) BeforeEquals(value DateTime) tasksDefaultParam {
	return tasksDefaultParam{
		data: builder.Field{
			Name: "startedAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r tasksQueryStartedAtDateTime) BeforeEqualsIfPresent(value *DateTime) tasksDefaultParam {
	if value == nil {
		return tasksDefaultParam{}
	}
	return r.BeforeEquals(*value)
}

// deprecated: Use Gte instead.

func (r tasksQueryStartedAtDateTime) AfterEquals(value DateTime) tasksDefaultParam {
	return tasksDefaultParam{
		data: builder.Field{
			Name: "startedAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r tasksQueryStartedAtDateTime) AfterEqualsIfPresent(value *DateTime) tasksDefaultParam {
	if value == nil {
		return tasksDefaultParam{}
	}
	return r.AfterEquals(*value)
}

func (r tasksQueryStartedAtDateTime) Field() tasksPrismaFields {
	return tasksFieldStartedAt
}

// base struct
type tasksQueryCompletedAtDateTime struct{}

// Set the optional value of CompletedAt
func (r tasksQueryCompletedAtDateTime) Set(value DateTime) tasksSetParam {

	return tasksSetParam{
		data: builder.Field{
			Name:  "completedAt",
			Value: value,
		},
	}

}

// Set the optional value of CompletedAt dynamically
func (r tasksQueryCompletedAtDateTime) SetIfPresent(value *DateTime) tasksSetParam {
	if value == nil {
		return tasksSetParam{}
	}

	return r.Set(*value)
}

// Set the optional value of CompletedAt dynamically
func (r tasksQueryCompletedAtDateTime) SetOptional(value *DateTime) tasksSetParam {
	if value == nil {

		var v *DateTime
		return tasksSetParam{
			data: builder.Field{
				Name:  "completedAt",
				Value: v,
			},
		}
	}

	return r.Set(*value)
}

func (r tasksQueryCompletedAtDateTime) Equals(value DateTime) tasksWithPrismaCompletedAtEqualsParam {

	return tasksWithPrismaCompletedAtEqualsParam{
		data: builder.Field{
			Name: "completedAt",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r tasksQueryCompletedAtDateTime) EqualsIfPresent(value *DateTime) tasksWithPrismaCompletedAtEqualsParam {
	if value == nil {
		return tasksWithPrismaCompletedAtEqualsParam{}
	}
	return r.Equals(*value)
}

func (r tasksQueryCompletedAtDateTime) EqualsOptional(value *DateTime) tasksDefaultParam {
	return tasksDefaultParam{
		data: builder.Field{
			Name: "completedAt",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r tasksQueryCompletedAtDateTime) IsNull() tasksDefaultParam {
	var str *string = nil
	return tasksDefaultParam{
		data: builder.Field{
			Name: "completedAt",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: str,
				},
			},
		},
	}
}

func (r tasksQueryCompletedAtDateTime) Order(direction SortOrder) tasksDefaultParam {
	return tasksDefaultParam{
		data: builder.Field{
			Name:  "completedAt",
			Value: direction,
		},
	}
}

func (r tasksQueryCompletedAtDateTime) Cursor(cursor DateTime) tasksCursorParam {
	return tasksCursorParam{
		data: builder.Field{
			Name:  "completedAt",
			Value: cursor,
		},
	}
}

func (r tasksQueryCompletedAtDateTime) In(value []DateTime) tasksDefaultParam {
	return tasksDefaultParam{
		data: builder.Field{
			Name: "completedAt",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r tasksQueryCompletedAtDateTime) InIfPresent(value []DateTime) tasksDefaultParam {
	if value == nil {
		return tasksDefaultParam{}
	}
	return r.In(value)
}

func (r tasksQueryCompletedAtDateTime) NotIn(value []DateTime) tasksDefaultParam {
	return tasksDefaultParam{
		data: builder.Field{
			Name: "completedAt",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r tasksQueryCompletedAtDateTime) NotInIfPresent(value []DateTime) tasksDefaultParam {
	if value == nil {
		return tasksDefaultParam{}
	}
	return r.NotIn(value)
}

func (r tasksQueryCompletedAtDateTime) Lt(value DateTime) tasksDefaultParam {
	return tasksDefaultParam{
		data: builder.Field{
			Name: "completedAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r tasksQueryCompletedAtDateTime) LtIfPresent(value *DateTime) tasksDefaultParam {
	if value == nil {
		return tasksDefaultParam{}
	}
	return r.Lt(*value)
}

func (r tasksQueryCompletedAtDateTime) Lte(value DateTime) tasksDefaultParam {
	return tasksDefaultParam{
		data: builder.Field{
			Name: "completedAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r tasksQueryCompletedAtDateTime) LteIfPresent(value *DateTime) tasksDefaultParam {
	if value == nil {
		return tasksDefaultParam{}
	}
	return r.Lte(*value)
}

func (r tasksQueryCompletedAtDateTime) Gt(value DateTime) tasksDefaultParam {
	return tasksDefaultParam{
		data: builder.Field{
			Name: "completedAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r tasksQueryCompletedAtDateTime) GtIfPresent(value *DateTime) tasksDefaultParam {
	if value == nil {
		return tasksDefaultParam{}
	}
	return r.Gt(*value)
}

func (r tasksQueryCompletedAtDateTime) Gte(value DateTime) tasksDefaultParam {
	return tasksDefaultParam{
		data: builder.Field{
			Name: "completedAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r tasksQueryCompletedAtDateTime) GteIfPresent(value *DateTime) tasksDefaultParam {
	if value == nil {
		return tasksDefaultParam{}
	}
	return r.Gte(*value)
}

func (r tasksQueryCompletedAtDateTime) Not(value DateTime) tasksDefaultParam {
	return tasksDefaultParam{
		data: builder.Field{
			Name: "completedAt",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r tasksQueryCompletedAtDateTime) NotIfPresent(value *DateTime) tasksDefaultParam {
	if value == nil {
		return tasksDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r tasksQueryCompletedAtDateTime) Before(value DateTime) tasksDefaultParam {
	return tasksDefaultParam{
		data: builder.Field{
			Name: "completedAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r tasksQueryCompletedAtDateTime) BeforeIfPresent(value *DateTime) tasksDefaultParam {
	if value == nil {
		return tasksDefaultParam{}
	}
	return r.Before(*value)
}

// deprecated: Use Gt instead.

func (r tasksQueryCompletedAtDateTime) After(value DateTime) tasksDefaultParam {
	return tasksDefaultParam{
		data: builder.Field{
			Name: "completedAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r tasksQueryCompletedAtDateTime) AfterIfPresent(value *DateTime) tasksDefaultParam {
	if value == nil {
		return tasksDefaultParam{}
	}
	return r.After(*value)
}

// deprecated: Use Lte instead.

func (r tasksQueryCompletedAtDateTime) BeforeEquals(value DateTime) tasksDefaultParam {
	return tasksDefaultParam{
		data: builder.Field{
			Name: "completedAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r tasksQueryCompletedAtDateTime) BeforeEqualsIfPresent(value *DateTime) tasksDefaultParam {
	if value == nil {
		return tasksDefaultParam{}
	}
	return r.BeforeEquals(*value)
}

// deprecated: Use Gte instead.

func (r tasksQueryCompletedAtDateTime) AfterEquals(value DateTime) tasksDefaultParam {
	return tasksDefaultParam{
		data: builder.Field{
			Name: "completedAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r tasksQueryCompletedAtDateTime) AfterEqualsIfPresent(value *DateTime) tasksDefaultParam {
	if value == nil {
		return tasksDefaultParam{}
	}
	return r.AfterEquals(*value)
}

func (r tasksQueryCompletedAtDateTime) Field() tasksPrismaFields {
	return tasksFieldCompletedAt
}

// base struct
type tasksQueryFailedAtDateTime struct{}

// Set the optional value of FailedAt
func (r tasksQueryFailedAtDateTime) Set(value DateTime) tasksSetParam {

	return tasksSetParam{
		data: builder.Field{
			Name:  "failedAt",
			Value: value,
		},
	}

}

// Set the optional value of FailedAt dynamically
func (r tasksQueryFailedAtDateTime) SetIfPresent(value *DateTime) tasksSetParam {
	if value == nil {
		return tasksSetParam{}
	}

	return r.Set(*value)
}

// Set the optional value of FailedAt dynamically
func (r tasksQueryFailedAtDateTime) SetOptional(value *DateTime) tasksSetParam {
	if value == nil {

		var v *DateTime
		return tasksSetParam{
			data: builder.Field{
				Name:  "failedAt",
				Value: v,
			},
		}
	}

	return r.Set(*value)
}

func (r tasksQueryFailedAtDateTime) Equals(value DateTime) tasksWithPrismaFailedAtEqualsParam {

	return tasksWithPrismaFailedAtEqualsParam{
		data: builder.Field{
			Name: "failedAt",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r tasksQueryFailedAtDateTime) EqualsIfPresent(value *DateTime) tasksWithPrismaFailedAtEqualsParam {
	if value == nil {
		return tasksWithPrismaFailedAtEqualsParam{}
	}
	return r.Equals(*value)
}

func (r tasksQueryFailedAtDateTime) EqualsOptional(value *DateTime) tasksDefaultParam {
	return tasksDefaultParam{
		data: builder.Field{
			Name: "failedAt",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r tasksQueryFailedAtDateTime) IsNull() tasksDefaultParam {
	var str *string = nil
	return tasksDefaultParam{
		data: builder.Field{
			Name: "failedAt",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: str,
				},
			},
		},
	}
}

func (r tasksQueryFailedAtDateTime) Order(direction SortOrder) tasksDefaultParam {
	return tasksDefaultParam{
		data: builder.Field{
			Name:  "failedAt",
			Value: direction,
		},
	}
}

func (r tasksQueryFailedAtDateTime) Cursor(cursor DateTime) tasksCursorParam {
	return tasksCursorParam{
		data: builder.Field{
			Name:  "failedAt",
			Value: cursor,
		},
	}
}

func (r tasksQueryFailedAtDateTime) In(value []DateTime) tasksDefaultParam {
	return tasksDefaultParam{
		data: builder.Field{
			Name: "failedAt",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r tasksQueryFailedAtDateTime) InIfPresent(value []DateTime) tasksDefaultParam {
	if value == nil {
		return tasksDefaultParam{}
	}
	return r.In(value)
}

func (r tasksQueryFailedAtDateTime) NotIn(value []DateTime) tasksDefaultParam {
	return tasksDefaultParam{
		data: builder.Field{
			Name: "failedAt",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r tasksQueryFailedAtDateTime) NotInIfPresent(value []DateTime) tasksDefaultParam {
	if value == nil {
		return tasksDefaultParam{}
	}
	return r.NotIn(value)
}

func (r tasksQueryFailedAtDateTime) Lt(value DateTime) tasksDefaultParam {
	return tasksDefaultParam{
		data: builder.Field{
			Name: "failedAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r tasksQueryFailedAtDateTime) LtIfPresent(value *DateTime) tasksDefaultParam {
	if value == nil {
		return tasksDefaultParam{}
	}
	return r.Lt(*value)
}

func (r tasksQueryFailedAtDateTime) Lte(value DateTime) tasksDefaultParam {
	return tasksDefaultParam{
		data: builder.Field{
			Name: "failedAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r tasksQueryFailedAtDateTime) LteIfPresent(value *DateTime) tasksDefaultParam {
	if value == nil {
		return tasksDefaultParam{}
	}
	return r.Lte(*value)
}

func (r tasksQueryFailedAtDateTime) Gt(value DateTime) tasksDefaultParam {
	return tasksDefaultParam{
		data: builder.Field{
			Name: "failedAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r tasksQueryFailedAtDateTime) GtIfPresent(value *DateTime) tasksDefaultParam {
	if value == nil {
		return tasksDefaultParam{}
	}
	return r.Gt(*value)
}

func (r tasksQueryFailedAtDateTime) Gte(value DateTime) tasksDefaultParam {
	return tasksDefaultParam{
		data: builder.Field{
			Name: "failedAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r tasksQueryFailedAtDateTime) GteIfPresent(value *DateTime) tasksDefaultParam {
	if value == nil {
		return tasksDefaultParam{}
	}
	return r.Gte(*value)
}

func (r tasksQueryFailedAtDateTime) Not(value DateTime) tasksDefaultParam {
	return tasksDefaultParam{
		data: builder.Field{
			Name: "failedAt",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r tasksQueryFailedAtDateTime) NotIfPresent(value *DateTime) tasksDefaultParam {
	if value == nil {
		return tasksDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r tasksQueryFailedAtDateTime) Before(value DateTime) tasksDefaultParam {
	return tasksDefaultParam{
		data: builder.Field{
			Name: "failedAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r tasksQueryFailedAtDateTime) BeforeIfPresent(value *DateTime) tasksDefaultParam {
	if value == nil {
		return tasksDefaultParam{}
	}
	return r.Before(*value)
}

// deprecated: Use Gt instead.

func (r tasksQueryFailedAtDateTime) After(value DateTime) tasksDefaultParam {
	return tasksDefaultParam{
		data: builder.Field{
			Name: "failedAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r tasksQueryFailedAtDateTime) AfterIfPresent(value *DateTime) tasksDefaultParam {
	if value == nil {
		return tasksDefaultParam{}
	}
	return r.After(*value)
}

// deprecated: Use Lte instead.

func (r tasksQueryFailedAtDateTime) BeforeEquals(value DateTime) tasksDefaultParam {
	return tasksDefaultParam{
		data: builder.Field{
			Name: "failedAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r tasksQueryFailedAtDateTime) BeforeEqualsIfPresent(value *DateTime) tasksDefaultParam {
	if value == nil {
		return tasksDefaultParam{}
	}
	return r.BeforeEquals(*value)
}

// deprecated: Use Gte instead.

func (r tasksQueryFailedAtDateTime) AfterEquals(value DateTime) tasksDefaultParam {
	return tasksDefaultParam{
		data: builder.Field{
			Name: "failedAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r tasksQueryFailedAtDateTime) AfterEqualsIfPresent(value *DateTime) tasksDefaultParam {
	if value == nil {
		return tasksDefaultParam{}
	}
	return r.AfterEquals(*value)
}

func (r tasksQueryFailedAtDateTime) Field() tasksPrismaFields {
	return tasksFieldFailedAt
}

// --- template actions.gotpl ---
var countOutput = []builder.Output{
	{Name: "count"},
}

type tasksActions struct {
	// client holds the prisma client
	client *PrismaClient
}

var tasksOutput = []builder.Output{
	{Name: "id"},
	{Name: "command"},
	{Name: "scheduledAt"},
	{Name: "pickedAt"},
	{Name: "startedAt"},
	{Name: "completedAt"},
	{Name: "failedAt"},
}

type TasksRelationWith interface {
	getQuery() builder.Query
	with()
	tasksRelation()
}

type TasksWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	tasksModel()
}

type tasksDefaultParam struct {
	data  builder.Field
	query builder.Query
}

func (p tasksDefaultParam) field() builder.Field {
	return p.data
}

func (p tasksDefaultParam) getQuery() builder.Query {
	return p.query
}

func (p tasksDefaultParam) tasksModel() {}

type TasksOrderByParam interface {
	field() builder.Field
	getQuery() builder.Query
	tasksModel()
}

type tasksOrderByParam struct {
	data  builder.Field
	query builder.Query
}

func (p tasksOrderByParam) field() builder.Field {
	return p.data
}

func (p tasksOrderByParam) getQuery() builder.Query {
	return p.query
}

func (p tasksOrderByParam) tasksModel() {}

type TasksCursorParam interface {
	field() builder.Field
	getQuery() builder.Query
	tasksModel()
	isCursor()
}

type tasksCursorParam struct {
	data  builder.Field
	query builder.Query
}

func (p tasksCursorParam) field() builder.Field {
	return p.data
}

func (p tasksCursorParam) isCursor() {}

func (p tasksCursorParam) getQuery() builder.Query {
	return p.query
}

func (p tasksCursorParam) tasksModel() {}

type TasksParamUnique interface {
	field() builder.Field
	getQuery() builder.Query
	unique()
	tasksModel()
}

type tasksParamUnique struct {
	data  builder.Field
	query builder.Query
}

func (p tasksParamUnique) tasksModel() {}

func (tasksParamUnique) unique() {}

func (p tasksParamUnique) field() builder.Field {
	return p.data
}

func (p tasksParamUnique) getQuery() builder.Query {
	return p.query
}

type TasksEqualsWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	tasksModel()
}

type tasksEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p tasksEqualsParam) tasksModel() {}

func (tasksEqualsParam) equals() {}

func (p tasksEqualsParam) field() builder.Field {
	return p.data
}

func (p tasksEqualsParam) getQuery() builder.Query {
	return p.query
}

type TasksEqualsUniqueWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	unique()
	tasksModel()
}

type tasksEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p tasksEqualsUniqueParam) tasksModel() {}

func (tasksEqualsUniqueParam) unique() {}
func (tasksEqualsUniqueParam) equals() {}

func (p tasksEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p tasksEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

type TasksSetParam interface {
	field() builder.Field
	settable()
	tasksModel()
}

type tasksSetParam struct {
	data builder.Field
}

func (tasksSetParam) settable() {}

func (p tasksSetParam) field() builder.Field {
	return p.data
}

func (p tasksSetParam) tasksModel() {}

type TasksWithPrismaIDEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	tasksModel()
	idField()
}

type TasksWithPrismaIDSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	tasksModel()
	idField()
}

type tasksWithPrismaIDSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p tasksWithPrismaIDSetParam) field() builder.Field {
	return p.data
}

func (p tasksWithPrismaIDSetParam) getQuery() builder.Query {
	return p.query
}

func (p tasksWithPrismaIDSetParam) tasksModel() {}

func (p tasksWithPrismaIDSetParam) idField() {}

type TasksWithPrismaIDWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	tasksModel()
	idField()
}

type tasksWithPrismaIDEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p tasksWithPrismaIDEqualsParam) field() builder.Field {
	return p.data
}

func (p tasksWithPrismaIDEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p tasksWithPrismaIDEqualsParam) tasksModel() {}

func (p tasksWithPrismaIDEqualsParam) idField() {}

func (tasksWithPrismaIDSetParam) settable()  {}
func (tasksWithPrismaIDEqualsParam) equals() {}

type tasksWithPrismaIDEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p tasksWithPrismaIDEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p tasksWithPrismaIDEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p tasksWithPrismaIDEqualsUniqueParam) tasksModel() {}
func (p tasksWithPrismaIDEqualsUniqueParam) idField()    {}

func (tasksWithPrismaIDEqualsUniqueParam) unique() {}
func (tasksWithPrismaIDEqualsUniqueParam) equals() {}

type TasksWithPrismaCommandEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	tasksModel()
	commandField()
}

type TasksWithPrismaCommandSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	tasksModel()
	commandField()
}

type tasksWithPrismaCommandSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p tasksWithPrismaCommandSetParam) field() builder.Field {
	return p.data
}

func (p tasksWithPrismaCommandSetParam) getQuery() builder.Query {
	return p.query
}

func (p tasksWithPrismaCommandSetParam) tasksModel() {}

func (p tasksWithPrismaCommandSetParam) commandField() {}

type TasksWithPrismaCommandWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	tasksModel()
	commandField()
}

type tasksWithPrismaCommandEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p tasksWithPrismaCommandEqualsParam) field() builder.Field {
	return p.data
}

func (p tasksWithPrismaCommandEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p tasksWithPrismaCommandEqualsParam) tasksModel() {}

func (p tasksWithPrismaCommandEqualsParam) commandField() {}

func (tasksWithPrismaCommandSetParam) settable()  {}
func (tasksWithPrismaCommandEqualsParam) equals() {}

type tasksWithPrismaCommandEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p tasksWithPrismaCommandEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p tasksWithPrismaCommandEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p tasksWithPrismaCommandEqualsUniqueParam) tasksModel()   {}
func (p tasksWithPrismaCommandEqualsUniqueParam) commandField() {}

func (tasksWithPrismaCommandEqualsUniqueParam) unique() {}
func (tasksWithPrismaCommandEqualsUniqueParam) equals() {}

type TasksWithPrismaScheduledAtEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	tasksModel()
	scheduledAtField()
}

type TasksWithPrismaScheduledAtSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	tasksModel()
	scheduledAtField()
}

type tasksWithPrismaScheduledAtSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p tasksWithPrismaScheduledAtSetParam) field() builder.Field {
	return p.data
}

func (p tasksWithPrismaScheduledAtSetParam) getQuery() builder.Query {
	return p.query
}

func (p tasksWithPrismaScheduledAtSetParam) tasksModel() {}

func (p tasksWithPrismaScheduledAtSetParam) scheduledAtField() {}

type TasksWithPrismaScheduledAtWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	tasksModel()
	scheduledAtField()
}

type tasksWithPrismaScheduledAtEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p tasksWithPrismaScheduledAtEqualsParam) field() builder.Field {
	return p.data
}

func (p tasksWithPrismaScheduledAtEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p tasksWithPrismaScheduledAtEqualsParam) tasksModel() {}

func (p tasksWithPrismaScheduledAtEqualsParam) scheduledAtField() {}

func (tasksWithPrismaScheduledAtSetParam) settable()  {}
func (tasksWithPrismaScheduledAtEqualsParam) equals() {}

type tasksWithPrismaScheduledAtEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p tasksWithPrismaScheduledAtEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p tasksWithPrismaScheduledAtEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p tasksWithPrismaScheduledAtEqualsUniqueParam) tasksModel()       {}
func (p tasksWithPrismaScheduledAtEqualsUniqueParam) scheduledAtField() {}

func (tasksWithPrismaScheduledAtEqualsUniqueParam) unique() {}
func (tasksWithPrismaScheduledAtEqualsUniqueParam) equals() {}

type TasksWithPrismaPickedAtEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	tasksModel()
	pickedAtField()
}

type TasksWithPrismaPickedAtSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	tasksModel()
	pickedAtField()
}

type tasksWithPrismaPickedAtSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p tasksWithPrismaPickedAtSetParam) field() builder.Field {
	return p.data
}

func (p tasksWithPrismaPickedAtSetParam) getQuery() builder.Query {
	return p.query
}

func (p tasksWithPrismaPickedAtSetParam) tasksModel() {}

func (p tasksWithPrismaPickedAtSetParam) pickedAtField() {}

type TasksWithPrismaPickedAtWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	tasksModel()
	pickedAtField()
}

type tasksWithPrismaPickedAtEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p tasksWithPrismaPickedAtEqualsParam) field() builder.Field {
	return p.data
}

func (p tasksWithPrismaPickedAtEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p tasksWithPrismaPickedAtEqualsParam) tasksModel() {}

func (p tasksWithPrismaPickedAtEqualsParam) pickedAtField() {}

func (tasksWithPrismaPickedAtSetParam) settable()  {}
func (tasksWithPrismaPickedAtEqualsParam) equals() {}

type tasksWithPrismaPickedAtEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p tasksWithPrismaPickedAtEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p tasksWithPrismaPickedAtEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p tasksWithPrismaPickedAtEqualsUniqueParam) tasksModel()    {}
func (p tasksWithPrismaPickedAtEqualsUniqueParam) pickedAtField() {}

func (tasksWithPrismaPickedAtEqualsUniqueParam) unique() {}
func (tasksWithPrismaPickedAtEqualsUniqueParam) equals() {}

type TasksWithPrismaStartedAtEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	tasksModel()
	startedAtField()
}

type TasksWithPrismaStartedAtSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	tasksModel()
	startedAtField()
}

type tasksWithPrismaStartedAtSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p tasksWithPrismaStartedAtSetParam) field() builder.Field {
	return p.data
}

func (p tasksWithPrismaStartedAtSetParam) getQuery() builder.Query {
	return p.query
}

func (p tasksWithPrismaStartedAtSetParam) tasksModel() {}

func (p tasksWithPrismaStartedAtSetParam) startedAtField() {}

type TasksWithPrismaStartedAtWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	tasksModel()
	startedAtField()
}

type tasksWithPrismaStartedAtEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p tasksWithPrismaStartedAtEqualsParam) field() builder.Field {
	return p.data
}

func (p tasksWithPrismaStartedAtEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p tasksWithPrismaStartedAtEqualsParam) tasksModel() {}

func (p tasksWithPrismaStartedAtEqualsParam) startedAtField() {}

func (tasksWithPrismaStartedAtSetParam) settable()  {}
func (tasksWithPrismaStartedAtEqualsParam) equals() {}

type tasksWithPrismaStartedAtEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p tasksWithPrismaStartedAtEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p tasksWithPrismaStartedAtEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p tasksWithPrismaStartedAtEqualsUniqueParam) tasksModel()     {}
func (p tasksWithPrismaStartedAtEqualsUniqueParam) startedAtField() {}

func (tasksWithPrismaStartedAtEqualsUniqueParam) unique() {}
func (tasksWithPrismaStartedAtEqualsUniqueParam) equals() {}

type TasksWithPrismaCompletedAtEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	tasksModel()
	completedAtField()
}

type TasksWithPrismaCompletedAtSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	tasksModel()
	completedAtField()
}

type tasksWithPrismaCompletedAtSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p tasksWithPrismaCompletedAtSetParam) field() builder.Field {
	return p.data
}

func (p tasksWithPrismaCompletedAtSetParam) getQuery() builder.Query {
	return p.query
}

func (p tasksWithPrismaCompletedAtSetParam) tasksModel() {}

func (p tasksWithPrismaCompletedAtSetParam) completedAtField() {}

type TasksWithPrismaCompletedAtWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	tasksModel()
	completedAtField()
}

type tasksWithPrismaCompletedAtEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p tasksWithPrismaCompletedAtEqualsParam) field() builder.Field {
	return p.data
}

func (p tasksWithPrismaCompletedAtEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p tasksWithPrismaCompletedAtEqualsParam) tasksModel() {}

func (p tasksWithPrismaCompletedAtEqualsParam) completedAtField() {}

func (tasksWithPrismaCompletedAtSetParam) settable()  {}
func (tasksWithPrismaCompletedAtEqualsParam) equals() {}

type tasksWithPrismaCompletedAtEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p tasksWithPrismaCompletedAtEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p tasksWithPrismaCompletedAtEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p tasksWithPrismaCompletedAtEqualsUniqueParam) tasksModel()       {}
func (p tasksWithPrismaCompletedAtEqualsUniqueParam) completedAtField() {}

func (tasksWithPrismaCompletedAtEqualsUniqueParam) unique() {}
func (tasksWithPrismaCompletedAtEqualsUniqueParam) equals() {}

type TasksWithPrismaFailedAtEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	tasksModel()
	failedAtField()
}

type TasksWithPrismaFailedAtSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	tasksModel()
	failedAtField()
}

type tasksWithPrismaFailedAtSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p tasksWithPrismaFailedAtSetParam) field() builder.Field {
	return p.data
}

func (p tasksWithPrismaFailedAtSetParam) getQuery() builder.Query {
	return p.query
}

func (p tasksWithPrismaFailedAtSetParam) tasksModel() {}

func (p tasksWithPrismaFailedAtSetParam) failedAtField() {}

type TasksWithPrismaFailedAtWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	tasksModel()
	failedAtField()
}

type tasksWithPrismaFailedAtEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p tasksWithPrismaFailedAtEqualsParam) field() builder.Field {
	return p.data
}

func (p tasksWithPrismaFailedAtEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p tasksWithPrismaFailedAtEqualsParam) tasksModel() {}

func (p tasksWithPrismaFailedAtEqualsParam) failedAtField() {}

func (tasksWithPrismaFailedAtSetParam) settable()  {}
func (tasksWithPrismaFailedAtEqualsParam) equals() {}

type tasksWithPrismaFailedAtEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p tasksWithPrismaFailedAtEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p tasksWithPrismaFailedAtEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p tasksWithPrismaFailedAtEqualsUniqueParam) tasksModel()    {}
func (p tasksWithPrismaFailedAtEqualsUniqueParam) failedAtField() {}

func (tasksWithPrismaFailedAtEqualsUniqueParam) unique() {}
func (tasksWithPrismaFailedAtEqualsUniqueParam) equals() {}

// --- template create.gotpl ---

// Creates a single tasks.
func (r tasksActions) CreateOne(
	_command TasksWithPrismaCommandSetParam,
	_scheduledAt TasksWithPrismaScheduledAtSetParam,

	optional ...TasksSetParam,
) tasksCreateOne {
	var v tasksCreateOne
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "mutation"
	v.query.Method = "createOne"
	v.query.Model = "Tasks"
	v.query.Outputs = tasksOutput

	var fields []builder.Field

	fields = append(fields, _command.field())
	fields = append(fields, _scheduledAt.field())

	for _, q := range optional {
		fields = append(fields, q.field())
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

func (r tasksCreateOne) With(params ...TasksRelationWith) tasksCreateOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

type tasksCreateOne struct {
	query builder.Query
}

func (p tasksCreateOne) ExtractQuery() builder.Query {
	return p.query
}

func (p tasksCreateOne) tasksModel() {}

func (r tasksCreateOne) Exec(ctx context.Context) (*TasksModel, error) {
	var v TasksModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r tasksCreateOne) Tx() TasksUniqueTxResult {
	v := newTasksUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

// --- template find.gotpl ---

type tasksFindUnique struct {
	query builder.Query
}

func (r tasksFindUnique) getQuery() builder.Query {
	return r.query
}

func (r tasksFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r tasksFindUnique) with()          {}
func (r tasksFindUnique) tasksModel()    {}
func (r tasksFindUnique) tasksRelation() {}

func (r tasksActions) FindUnique(
	params TasksEqualsUniqueWhereParam,
) tasksFindUnique {
	var v tasksFindUnique
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findUnique"

	v.query.Model = "Tasks"
	v.query.Outputs = tasksOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: builder.TransformEquals([]builder.Field{params.field()}),
	})

	return v
}

func (r tasksFindUnique) With(params ...TasksRelationWith) tasksFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r tasksFindUnique) Select(params ...tasksPrismaFields) tasksFindUnique {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r tasksFindUnique) Omit(params ...tasksPrismaFields) tasksFindUnique {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range tasksOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r tasksFindUnique) Exec(ctx context.Context) (
	*TasksModel,
	error,
) {
	var v *TasksModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r tasksFindUnique) ExecInner(ctx context.Context) (
	*InnerTasks,
	error,
) {
	var v *InnerTasks
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r tasksFindUnique) Update(params ...TasksSetParam) tasksUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "Tasks"

	var v tasksUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type tasksUpdateUnique struct {
	query builder.Query
}

func (r tasksUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r tasksUpdateUnique) tasksModel() {}

func (r tasksUpdateUnique) Exec(ctx context.Context) (*TasksModel, error) {
	var v TasksModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r tasksUpdateUnique) Tx() TasksUniqueTxResult {
	v := newTasksUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r tasksFindUnique) Delete() tasksDeleteUnique {
	var v tasksDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "Tasks"

	return v
}

type tasksDeleteUnique struct {
	query builder.Query
}

func (r tasksDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p tasksDeleteUnique) tasksModel() {}

func (r tasksDeleteUnique) Exec(ctx context.Context) (*TasksModel, error) {
	var v TasksModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r tasksDeleteUnique) Tx() TasksUniqueTxResult {
	v := newTasksUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type tasksFindFirst struct {
	query builder.Query
}

func (r tasksFindFirst) getQuery() builder.Query {
	return r.query
}

func (r tasksFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r tasksFindFirst) with()          {}
func (r tasksFindFirst) tasksModel()    {}
func (r tasksFindFirst) tasksRelation() {}

func (r tasksActions) FindFirst(
	params ...TasksWhereParam,
) tasksFindFirst {
	var v tasksFindFirst
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findFirst"

	v.query.Model = "Tasks"
	v.query.Outputs = tasksOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r tasksFindFirst) With(params ...TasksRelationWith) tasksFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r tasksFindFirst) Select(params ...tasksPrismaFields) tasksFindFirst {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r tasksFindFirst) Omit(params ...tasksPrismaFields) tasksFindFirst {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range tasksOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r tasksFindFirst) OrderBy(params ...TasksOrderByParam) tasksFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r tasksFindFirst) Skip(count int) tasksFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r tasksFindFirst) Take(count int) tasksFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r tasksFindFirst) Cursor(cursor TasksCursorParam) tasksFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r tasksFindFirst) Exec(ctx context.Context) (
	*TasksModel,
	error,
) {
	var v *TasksModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r tasksFindFirst) ExecInner(ctx context.Context) (
	*InnerTasks,
	error,
) {
	var v *InnerTasks
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type tasksFindMany struct {
	query builder.Query
}

func (r tasksFindMany) getQuery() builder.Query {
	return r.query
}

func (r tasksFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r tasksFindMany) with()          {}
func (r tasksFindMany) tasksModel()    {}
func (r tasksFindMany) tasksRelation() {}

func (r tasksActions) FindMany(
	params ...TasksWhereParam,
) tasksFindMany {
	var v tasksFindMany
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findMany"

	v.query.Model = "Tasks"
	v.query.Outputs = tasksOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r tasksFindMany) With(params ...TasksRelationWith) tasksFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r tasksFindMany) Select(params ...tasksPrismaFields) tasksFindMany {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r tasksFindMany) Omit(params ...tasksPrismaFields) tasksFindMany {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range tasksOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r tasksFindMany) OrderBy(params ...TasksOrderByParam) tasksFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r tasksFindMany) Skip(count int) tasksFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r tasksFindMany) Take(count int) tasksFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r tasksFindMany) Cursor(cursor TasksCursorParam) tasksFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r tasksFindMany) Exec(ctx context.Context) (
	[]TasksModel,
	error,
) {
	var v []TasksModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r tasksFindMany) ExecInner(ctx context.Context) (
	[]InnerTasks,
	error,
) {
	var v []InnerTasks
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r tasksFindMany) Update(params ...TasksSetParam) tasksUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "Tasks"

	r.query.Outputs = countOutput

	var v tasksUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type tasksUpdateMany struct {
	query builder.Query
}

func (r tasksUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r tasksUpdateMany) tasksModel() {}

func (r tasksUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r tasksUpdateMany) Tx() TasksManyTxResult {
	v := newTasksManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r tasksFindMany) Delete() tasksDeleteMany {
	var v tasksDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "Tasks"

	v.query.Outputs = countOutput

	return v
}

type tasksDeleteMany struct {
	query builder.Query
}

func (r tasksDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p tasksDeleteMany) tasksModel() {}

func (r tasksDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r tasksDeleteMany) Tx() TasksManyTxResult {
	v := newTasksManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

// --- template transaction.gotpl ---

func newTasksUniqueTxResult() TasksUniqueTxResult {
	return TasksUniqueTxResult{
		result: &transaction.Result{},
	}
}

type TasksUniqueTxResult struct {
	query  builder.Query
	result *transaction.Result
}

func (p TasksUniqueTxResult) ExtractQuery() builder.Query {
	return p.query
}

func (p TasksUniqueTxResult) IsTx() {}

func (r TasksUniqueTxResult) Result() (v *TasksModel) {
	if err := r.result.Get(r.query.TxResult, &v); err != nil {
		panic(err)
	}
	return v
}

func newTasksManyTxResult() TasksManyTxResult {
	return TasksManyTxResult{
		result: &transaction.Result{},
	}
}

type TasksManyTxResult struct {
	query  builder.Query
	result *transaction.Result
}

func (p TasksManyTxResult) ExtractQuery() builder.Query {
	return p.query
}

func (p TasksManyTxResult) IsTx() {}

func (r TasksManyTxResult) Result() (v *BatchResult) {
	if err := r.result.Get(r.query.TxResult, &v); err != nil {
		panic(err)
	}
	return v
}

// --- template upsert.gotpl ---

type tasksUpsertOne struct {
	query builder.Query
}

func (r tasksUpsertOne) getQuery() builder.Query {
	return r.query
}

func (r tasksUpsertOne) ExtractQuery() builder.Query {
	return r.query
}

func (r tasksUpsertOne) with()          {}
func (r tasksUpsertOne) tasksModel()    {}
func (r tasksUpsertOne) tasksRelation() {}

func (r tasksActions) UpsertOne(
	params TasksEqualsUniqueWhereParam,
) tasksUpsertOne {
	var v tasksUpsertOne
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "mutation"
	v.query.Method = "upsertOne"
	v.query.Model = "Tasks"
	v.query.Outputs = tasksOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: builder.TransformEquals([]builder.Field{params.field()}),
	})

	return v
}

func (r tasksUpsertOne) Create(

	_command TasksWithPrismaCommandSetParam,
	_scheduledAt TasksWithPrismaScheduledAtSetParam,

	optional ...TasksSetParam,
) tasksUpsertOne {
	var v tasksUpsertOne
	v.query = r.query

	var fields []builder.Field
	fields = append(fields, _command.field())
	fields = append(fields, _scheduledAt.field())

	for _, q := range optional {
		fields = append(fields, q.field())
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "create",
		Fields: fields,
	})

	return v
}

func (r tasksUpsertOne) Update(
	params ...TasksSetParam,
) tasksUpsertOne {
	var v tasksUpsertOne
	v.query = r.query

	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "update",
		Fields: fields,
	})

	return v
}

func (r tasksUpsertOne) Exec(ctx context.Context) (*TasksModel, error) {
	var v TasksModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r tasksUpsertOne) Tx() TasksUniqueTxResult {
	v := newTasksUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}
